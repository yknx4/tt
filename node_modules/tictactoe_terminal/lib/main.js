'use strict';

var _tictactoe_core = require('tictactoe_core');

var _tictactoe_core2 = _interopRequireDefault(_tictactoe_core);

var _Player = require('tictactoe_core/lib/Player');

var _Player2 = _interopRequireDefault(_Player);

var _prompt = require('prompt');

var _prompt2 = _interopRequireDefault(_prompt);

var _readlineSync = require('readline-sync');

var _readlineSync2 = _interopRequireDefault(_readlineSync);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function () {
  var defaults = { main: main };
  function main() {
    var playerPromptSchema = {
      properties: {
        firstPlayerName: {
          required: true,
          description: 'First player name: ',
          default: 'Player 1'
        },
        secondPlayerName: {
          required: true,
          description: 'Second player name: ',
          default: 'Player 2'
        }
      }
    };

    var score = {};
    var players = [];
    var turn = 1;

    var finished;
    var game = void 0;
    var board = void 0;
    initializeBoard();

    _prompt2.default.start();
    _prompt2.default.get(playerPromptSchema, function (err, result) {
      if (err) {
        console.log(err.message);
      }
      console.log('Players:');
      console.log('  First Player: ' + result.firstPlayerName);
      console.log('  Second Player: ' + result.secondPlayerName);
      createPlayer('X', result.firstPlayerName);
      createPlayer('O', result.secondPlayerName);
      playNextTurn();
    });

    function playNextTurn() {
      if (finished) {
        promptNewGame();
        return;
      }
      var turnData = nextTurn();
      console.log(turnData.message);
      var x = _readlineSync2.default.questionInt('Column: ', { limit: function limit(number) {
          return number > 0 && number < board.width;
        } });
      var y = _readlineSync2.default.questionInt('Row: ', { limit: function limit(number) {
          return number > 0 && number < board.height;
        } });
      try {
        turnData.player.play(x, y);
      } catch (e) {
        console.log(e.message);
        turn--;
      } finally {
        drawBoard();
        playNextTurn();
      }
    }

    function createPlayer(id, name) {
      var player = new _Player2.default(id, name);
      players.push(player);
      game.addPlayer(player);
      score[id] = 0;
    }

    function nextTurn() {
      turn = (turn + 1) % 2;
      var player = players[turn];
      return { message: player.name + ' (' + player.id + ') turn', player: player };
    }

    function drawBoard() {
      var board = game.board;
      process.stdout.write("\n");
      for (var x = board.width; x !== 0; x--) {
        for (var y = 1; y <= board.height; y++) {
          var cell = board.getCell(x - 1, y - 1) || '_';
          process.stdout.write(cell + '\t');
        }
        process.stdout.write("\n");
      }
      process.stdout.write("\n");
    }

    function promptNewGame() {
      if (!_readlineSync2.default.keyInYN('Do you want to play another one?')) {
        process.exit();
        return;
      }
      initializeBoard();
      playNextTurn();
    }

    function onWinnerListener(player) {
      finished = true;
      console.log('');
      if (player === null) {
        console.log("Game was a draw");
      } else {
        console.log(player.name + ' (' + player.id + ') wins.');
        score[player.id]++;
        _underscore2.default.each(players, printScore);
      }
      console.log('');
    }

    function printScore(player) {
      console.log(player.name + ' wins: ' + score[player.id]);
    }

    function initializeBoard() {
      finished = false;
      game = _tictactoe_core2.default.default();
      board = game.board;
      game.onWinnerListener = onWinnerListener;
      if (players.length > 0) {
        _underscore2.default.each(players, function (player) {
          game.addPlayer(player);
        });
      }
    }
  }
  exports.default = defaults;

  if (!module.parent) {
    defaults.main(process.argv[2]);
  }
})();
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=main.js.map