{"version":3,"sources":["../src/main.js"],"names":["defaults","main","playerPromptSchema","properties","firstPlayerName","required","description","default","secondPlayerName","score","players","turn","finished","game","board","initializeBoard","start","get","err","result","console","log","message","createPlayer","playNextTurn","promptNewGame","turnData","nextTurn","x","questionInt","limit","number","width","y","height","player","play","e","drawBoard","id","name","push","addPlayer","process","stdout","write","cell","getCell","keyInYN","exit","onWinnerListener","each","printScore","length","exports","module","parent","argv"],"mappings":"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","file":"main.js","sourcesContent":["import tictactoeCore from 'tictactoe_core'\nimport Player from 'tictactoe_core/lib/Player'\nimport prompt from 'prompt'\nimport readlineSync from 'readline-sync'\nimport _ from 'underscore'\n(function() {\n  let defaults = {main: main}\n  function main() {\n    let playerPromptSchema = {\n      properties: {\n        firstPlayerName: {\n          required: true,\n          description: 'First player name: ',\n          default: 'Player 1'\n        },\n        secondPlayerName: {\n          required: true,\n          description: 'Second player name: ',\n          default: 'Player 2'\n        }\n      }\n    }\n\n    let score = {}\n    let players = []\n    let turn = 1\n\n    var finished\n    let game\n    let board\n    initializeBoard()\n\n    prompt.start();\n    prompt.get(playerPromptSchema, function(err, result) {\n      if (err) {\n        console.log(err.message)\n      }\n      console.log('Players:');\n      console.log('  First Player: ' + result.firstPlayerName);\n      console.log('  Second Player: ' + result.secondPlayerName);\n      createPlayer('X', result.firstPlayerName)\n      createPlayer('O', result.secondPlayerName)\n      playNextTurn()\n    })\n\n    function playNextTurn() {\n      if (finished) {\n        promptNewGame()\n        return\n      }\n      let turnData = nextTurn()\n      console.log(turnData.message);\n      let x = readlineSync.questionInt('Column: ', {limit: number => {\n        return number > 0 && number < board.width\n      }})\n      let y = readlineSync.questionInt('Row: ', {limit: number => {\n        return number > 0 && number < board.height\n      }})\n      try {\n        turnData.player.play(x, y)\n      } catch (e) {\n        console.log(e.message);\n        turn--\n      } finally {\n        drawBoard()\n        playNextTurn()\n      }\n    }\n\n    function createPlayer(id, name) {\n      let player = new Player(id, name)\n      players.push(player)\n      game.addPlayer(player)\n      score[id] = 0\n    }\n\n    function nextTurn() {\n      turn = (turn + 1) % 2\n      let player = players[turn]\n      return {message: `${player.name} (${player.id}) turn`, player: player}\n    }\n\n    function drawBoard() {\n      let board = game.board\n      process.stdout.write(\"\\n\");\n      for (let x = board.width; x !== 0; x--) {\n        for (let y = 1; y <= board.height; y++) {\n          let cell = board.getCell(x - 1, y - 1) || '_'\n          process.stdout.write(`${cell}\\t`);\n        }\n        process.stdout.write(\"\\n\");\n      }\n      process.stdout.write(\"\\n\");\n    }\n\n    function promptNewGame() {\n      if (!readlineSync.keyInYN('Do you want to play another one?')) {\n        process.exit();\n        return\n      }\n      initializeBoard()\n      playNextTurn()\n    }\n\n    function onWinnerListener(player) {\n      finished = true\n      console.log('');\n      if (player === null) {\n        console.log(\"Game was a draw\");\n      } else {\n        console.log(`${player.name} (${player.id}) wins.`)\n        score[player.id]++\n        _.each(players, printScore)\n      }\n      console.log('');\n    }\n\n    function printScore(player) {\n      console.log(`${player.name} wins: ${score[player.id]}`);\n    }\n\n    function initializeBoard() {\n      finished = false\n      game = tictactoeCore.default()\n      board = game.board\n      game.onWinnerListener = onWinnerListener\n      if (players.length > 0) {\n        _.each(players, function(player) {\n          game.addPlayer(player)\n        })\n      }\n    }\n  }\n  exports.default = defaults\n\n  if (!module.parent) {\n    defaults.main(process.argv[2]);\n  }\n})();\n"]}