{"version":3,"sources":["../../src/validation/ParameterValidation.js"],"names":["validateDimension","dimension","name","isNotANumber","TypeError","isInvalidDimension","validatePresence","element","isUndefined","validateType","type","hasProperType"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;;;;AASA,SAASA,iBAAT,CAA2BC,SAA3B,EAAsCC,IAAtC,EAA4C;AAC1CA,SAAOA,QAAQ,WAAf;;AAEA,MAAIC,eAAe,OAAOF,SAAP,KAAqB,QAAxC;AACA,MAAIE,YAAJ,EAAkB;AAChB,UAAM,IAAIC,SAAJ,CAAiBF,IAAjB,0BAAN;AACD;;AAED,MAAIG,qBAAqBJ,YAAY,CAArC;AACA,MAAII,kBAAJ,EAAwB;AACtB,UAAM,IAAID,SAAJ,CAAiBF,IAAjB,gCAAN;AACD;AACF;;AAED;;;;;;;AAOA,SAASI,gBAAT,CAA0BC,OAA1B,EAAmCL,IAAnC,EAAyC;AACvCA,SAAOA,QAAQ,WAAf;AACA,MAAIM,cAAc,qBAAEA,WAAF,CAAcD,OAAd,CAAlB;AACA,MAAIC,WAAJ,EAAiB;AACf,UAAM,IAAIJ,SAAJ,CAAiBF,IAAjB,yBAAN;AACD;AACF;;AAED;;;;;;;AAOA,SAASO,YAAT,CAAsBF,OAAtB,EAA+BG,IAA/B,EAAqCR,IAArC,EAA2C;AACzCA,SAAOA,QAAQ,WAAf;AACA,MAAIS,gBAAgBJ,mBAAmBG,IAAvC;AACA,MAAI,CAACC,aAAL,EAAoB;AAClB,UAAM,IAAIP,SAAJ,CAAiBF,IAAjB,+BAA+CQ,KAAKR,IAApD,OAAN;AACD;AACF;;kBAEc;AACbF,qBAAmBA,iBADN;AAEbM,oBAAkBA,gBAFL;AAGbG,gBAAcA;AAHD,C","file":"ParameterValidation.js","sourcesContent":["import _ from 'underscore'\n\n/**\n * validateDimension - Validates the input is a valid Dimension\n *  - it should be a number\n *  - it should be positive\n *  - throws a TypeError when input is invalid\n *\n * @param  {number} dimension the value to validate\n * @param  {string} name      the name of the parameter (optional)\n */\nfunction validateDimension(dimension, name) {\n  name = name || 'Parameter'\n\n  let isNotANumber = typeof dimension !== 'number'\n  if (isNotANumber) {\n    throw new TypeError(`${name} should be a number.`)\n  }\n\n  let isInvalidDimension = dimension < 1\n  if (isInvalidDimension) {\n    throw new TypeError(`${name} should be greater than 0.`)\n  }\n}\n\n/**\n * validatePresence - Validates the input is not undefined\n *  - throws a TypeError when input is undefined\n *\n * @param  {Object} element the input that is going to be validated\n * @param  {string} name    the name of the parameter (optional)\n */\nfunction validatePresence(element, name) {\n  name = name || 'Parameter'\n  let isUndefined = _.isUndefined(element)\n  if (isUndefined) {\n    throw new TypeError(`${name} should be present.`)\n  }\n}\n\n/**\n * validateType - Validates the input is instance of a specified type\n *\n * @param  {type} element the input that is going to be validated\n * @param  {type} type    the type that the input should be instanceof\n * @param  {type} name    the name of the parameter (optional)\n */\nfunction validateType(element, type, name) {\n  name = name || 'Parameter'\n  let hasProperType = element instanceof type\n  if (!hasProperType) {\n    throw new TypeError(`${name} should be instance of ${type.name}.`)\n  }\n}\n\nexport default {\n  validateDimension: validateDimension,\n  validatePresence: validatePresence,\n  validateType: validateType\n}\n"]}