{"version":3,"sources":["../src/WinnerChecker.js"],"names":["WinnerChecker","board","id","numberToWin","_id","_board","_numberToWin","validateType","x","y","_x","_y","counts","_checkUpDown","_checkLeftRight","_checkSlash","_checkBackSlash","winner","find","num","upDownX","upDownY","upDownCount","_checkUp","_checkDown","_check","leftRightX","leftRightY","leftRightCount","_checkRigth","_checkLeft","slashX","slashY","slashCount","_checkSlashUp","_checkSlashDown","backSlashX","backSlashY","backSlashCount","_checkBackSlashUp","_checkBackSlashDown","directionX","directionY","getCell"],"mappings":"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","file":"WinnerChecker.js","sourcesContent":["import Base from './Base'\nimport Board from './Board'\nimport ParameterValidation from './validation/ParameterValidation.js'\nimport _ from 'underscore'\n\nexport default class WinnerChecker extends Base {\n  constructor(board, id, numberToWin) {\n    super()\n    this._id = id\n    this._board = board\n    this._numberToWin = numberToWin\n    ParameterValidation.validateType(board, Board, 'board')\n  }\n\n  checkWinner(x, y) {\n    this._x = x\n    this._y = y\n    let counts = [this._checkUpDown(), this._checkLeftRight(), this._checkSlash(), this._checkBackSlash()]\n    let winner = _.find(counts, num => {\n      return num >= this._numberToWin\n    })\n    return typeof winner !== 'undefined'\n  }\n\n  _checkUpDown() {\n    let x = this._x\n    let y = this._y\n\n    let upDownX = x\n    let upDownY = y\n    let upDownCount = 1\n\n    while (this._checkUp(upDownX, upDownY)) {\n      upDownCount++\n      upDownY++\n    }\n\n    upDownX = x\n    upDownY = y\n\n    while (this._checkDown(upDownX, upDownY)) {\n      upDownCount++\n      upDownY--\n    }\n    return upDownCount\n  }\n\n  _checkUp(x, y) {\n    return this._check(x, y, 0, 1)\n  }\n\n  _checkDown(x, y) {\n    return this._check(x, y, 0, -1)\n  }\n\n  _checkLeftRight() {\n    let x = this._x\n    let y = this._y\n\n    let leftRightX = x\n    let leftRightY = y\n    let leftRightCount = 1\n\n    while (this._checkRigth(leftRightX, leftRightY)) {\n      leftRightCount++\n      leftRightX++\n    }\n\n    leftRightX = x\n    leftRightY = y\n\n    while (this._checkLeft(leftRightX, leftRightY)) {\n      leftRightCount++\n      leftRightX--\n    }\n    return leftRightCount\n  }\n\n  _checkLeft(x, y) {\n    return this._check(x, y, -1, 0)\n  }\n\n  _checkRigth(x, y) {\n    return this._check(x, y, 1, 0)\n  }\n\n  _checkSlash() {\n    let x = this._x\n    let y = this._y\n\n    let slashX = x\n    let slashY = y\n    let slashCount = 1\n\n    while (this._checkSlashUp(slashX, slashY)) {\n      slashCount++\n      slashY++\n      slashX++\n    }\n\n    slashX = x\n    slashY = y\n\n    while (this._checkSlashDown(slashX, slashY)) {\n      slashCount++\n      slashY--\n      slashX--\n    }\n    return slashCount\n  }\n\n  _checkSlashUp(x, y) {\n    return this._check(x, y, 1, 1)\n  }\n\n  _checkSlashDown(x, y) {\n    return this._check(x, y, -1, -1)\n  }\n\n  _checkBackSlash() {\n    let x = this._x\n    let y = this._y\n\n    let backSlashX = x\n    let backSlashY = y\n    let backSlashCount = 1\n\n    while (this._checkBackSlashUp(backSlashX, backSlashY)) {\n      backSlashCount++\n      backSlashY++\n      backSlashX--\n    }\n\n    backSlashX = x\n    backSlashY = y\n\n    while (this._checkBackSlashDown(backSlashX, backSlashY)) {\n      backSlashCount++\n      backSlashY--\n      backSlashX++\n    }\n    return backSlashCount\n  }\n\n  _checkBackSlashUp(x, y) {\n    return this._check(x, y, -1, 1)\n  }\n\n  _checkBackSlashDown(x, y) {\n    return this._check(x, y, 1, -1)\n  }\n\n  _check(x, y, directionX, directionY) {\n    x += directionX\n    y += directionY\n    return this._board.getCell(x, y) === this._id\n  }\n}\n"]}