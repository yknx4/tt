'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Base2 = require('./Base');

var _Base3 = _interopRequireDefault(_Base2);

var _Board = require('./Board');

var _Board2 = _interopRequireDefault(_Board);

var _Player = require('./Player');

var _Player2 = _interopRequireDefault(_Player);

var _ParameterValidation = require('./validation/ParameterValidation.js');

var _ParameterValidation2 = _interopRequireDefault(_ParameterValidation);

var _WinnerChecker = require('./WinnerChecker');

var _WinnerChecker2 = _interopRequireDefault(_WinnerChecker);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Game = function (_Base) {
  _inherits(Game, _Base);

  function Game(boardWidth, boardHeigth, fieldsToWin, numOfPlayers) {
    _classCallCheck(this, Game);

    var _this = _possibleConstructorReturn(this, (Game.__proto__ || Object.getPrototypeOf(Game)).call(this));

    _this._numOfPlayers = numOfPlayers || 2;
    _this._fieldsToWin = fieldsToWin || 3;
    _this._board = new _Board2.default(boardWidth, boardHeigth);
    _this._players = [];
    _this._winnerCheckers = {};
    _this._validateFieldsToWin(_underscore2.default.max([boardWidth, boardHeigth]));
    _this._nextTurn = '';
    return _this;
  }

  _createClass(Game, [{
    key: '_validateFieldsToWin',
    value: function _validateFieldsToWin(maxDimension) {
      var winningIsImpossible = maxDimension < this._fieldsToWin;
      if (winningIsImpossible) {
        throw new RangeError('Fields to win should not be bigger than Board\'s max dimension');
      }
    }
  }, {
    key: 'addPlayer',
    value: function addPlayer(player) {
      _ParameterValidation2.default.validateType(player, _Player2.default, 'player');
      var playerExists = !_underscore2.default.isUndefined(this.getPlayer(player.id));
      if (playerExists) {
        console.warn('Player ' + player.name + ' is already in the game.');
        return;
      }
      this._validatePlayerCount();
      player.game = this;
      this._players.push(player);
      this._winnerCheckers[player.id] = new _WinnerChecker2.default(this._board, player.id, this.fieldsToWin);
    }
  }, {
    key: 'getPlayer',
    value: function getPlayer(playerId) {
      return _underscore2.default.findWhere(this._players, { id: playerId });
    }
  }, {
    key: '_validatePlayerCount',
    value: function _validatePlayerCount() {
      var playersCapped = this.playerCount >= this.numOfPlayers;
      if (playersCapped) {
        throw new RangeError('Game is full.');
      }
    }
  }, {
    key: 'play',
    value: function play(playerId, x, y) {
      this._validateHasAllPlayers();
      this._validateTurn(playerId);
      try {
        this._board.play(playerId, x, y);
      } catch (e) {
        this._undoTurn();
        throw e;
      }
      this._checkWinners(playerId, x, y);
      this._checkDraw();
    }
  }, {
    key: '_validateHasAllPlayers',
    value: function _validateHasAllPlayers() {
      var playersCapped = this.playerCount >= this.numOfPlayers;
      if (!playersCapped) {
        throw new RangeError('Game cannot start without all players.');
      }
    }
  }, {
    key: '_validateTurn',
    value: function _validateTurn(id) {
      if (this.firstTurn() || this._nextTurn === id) {
        var playerPosition = _underscore2.default.findIndex(this._players, { id: id });
        var nextPlayerPosition = (playerPosition + 1) % this._numOfPlayers;
        this._nextTurn = this._players[nextPlayerPosition].id;
      } else {
        throw new Error('This is turn of ' + this._nextTurn);
      }
    }
  }, {
    key: '_undoTurn',
    value: function _undoTurn() {
      var playerPosition = _underscore2.default.findIndex(this._players, { id: this._nextTurn });
      var nextPlayerPosition = (playerPosition - 1) % this._numOfPlayers;
      if (nextPlayerPosition < 0) {
        nextPlayerPosition += this._numOfPlayers;
      }
      this._nextTurn = this._players[nextPlayerPosition].id;
    }
  }, {
    key: 'firstTurn',
    value: function firstTurn() {
      return this._nextTurn === '';
    }
  }, {
    key: '_checkWinners',
    value: function _checkWinners(playerId, x, y) {
      var winnerListenerExists = !_underscore2.default.isUndefined(this._onWinnerListener);
      if (this._winnerCheckers[playerId].checkWinner(x, y) && winnerListenerExists) {
        this._onWinnerListener(this.getPlayer(playerId));
        this._finished = true;
      } else if (!winnerListenerExists) {
        console.warn('There is no onWinnerListener attached.');
      }
    }
  }, {
    key: '_checkDraw',
    value: function _checkDraw() {
      var noWinners = !(this._finished === true);
      var winnerListenerExists = !_underscore2.default.isUndefined(this._onWinnerListener);
      if (noWinners) {
        var board = this._board;
        var maxPlays = board.height * board.width;
        var playsCount = board.count;
        var isDraw = playsCount === maxPlays;
        if (isDraw && winnerListenerExists) {
          this._onWinnerListener(null);
        } else if (!winnerListenerExists) {
          console.warn('There is no onWinnerListener attached.');
        }
      }
    }
  }, {
    key: 'numOfPlayers',
    get: function get() {
      return this._numOfPlayers;
    }
  }, {
    key: 'playerCount',
    get: function get() {
      return this._players.length;
    }
  }, {
    key: 'fieldsToWin',
    get: function get() {
      return this._fieldsToWin;
    }
  }, {
    key: 'board',
    get: function get() {
      return this._board;
    }
  }, {
    key: 'onWinnerListener',
    set: function set(listener) {
      this._onWinnerListener = listener;
    }
  }]);

  return Game;
}(_Base3.default);

exports.default = Game;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9HYW1lLmpzIl0sIm5hbWVzIjpbIkdhbWUiLCJib2FyZFdpZHRoIiwiYm9hcmRIZWlndGgiLCJmaWVsZHNUb1dpbiIsIm51bU9mUGxheWVycyIsIl9udW1PZlBsYXllcnMiLCJfZmllbGRzVG9XaW4iLCJfYm9hcmQiLCJfcGxheWVycyIsIl93aW5uZXJDaGVja2VycyIsIl92YWxpZGF0ZUZpZWxkc1RvV2luIiwibWF4IiwiX25leHRUdXJuIiwibWF4RGltZW5zaW9uIiwid2lubmluZ0lzSW1wb3NzaWJsZSIsIlJhbmdlRXJyb3IiLCJwbGF5ZXIiLCJ2YWxpZGF0ZVR5cGUiLCJwbGF5ZXJFeGlzdHMiLCJpc1VuZGVmaW5lZCIsImdldFBsYXllciIsImlkIiwiY29uc29sZSIsIndhcm4iLCJuYW1lIiwiX3ZhbGlkYXRlUGxheWVyQ291bnQiLCJnYW1lIiwicHVzaCIsInBsYXllcklkIiwiZmluZFdoZXJlIiwicGxheWVyc0NhcHBlZCIsInBsYXllckNvdW50IiwieCIsInkiLCJfdmFsaWRhdGVIYXNBbGxQbGF5ZXJzIiwiX3ZhbGlkYXRlVHVybiIsInBsYXkiLCJlIiwiX3VuZG9UdXJuIiwiX2NoZWNrV2lubmVycyIsIl9jaGVja0RyYXciLCJmaXJzdFR1cm4iLCJwbGF5ZXJQb3NpdGlvbiIsImZpbmRJbmRleCIsIm5leHRQbGF5ZXJQb3NpdGlvbiIsIkVycm9yIiwid2lubmVyTGlzdGVuZXJFeGlzdHMiLCJfb25XaW5uZXJMaXN0ZW5lciIsImNoZWNrV2lubmVyIiwiX2ZpbmlzaGVkIiwibm9XaW5uZXJzIiwiYm9hcmQiLCJtYXhQbGF5cyIsImhlaWdodCIsIndpZHRoIiwicGxheXNDb3VudCIsImNvdW50IiwiaXNEcmF3IiwibGVuZ3RoIiwibGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUJBLEk7OztBQUVuQixnQkFBWUMsVUFB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QUFlO0FBQ2IsWUFBSUMsUUFBUSxLQUFLNUMsTUFBakI7QUFDQSxZQUFJNkMsV0FBV0QsTUFBTUUsTUFBTixHQUFlRixNQUFNRyxLQUFwQztBQUNBLFlBQUlDLGFBQWFKLE1BQU1LLEtBQXZCO0FBQ0EsWUFBSUMsU0FBU0YsZUFBZUgsUUFBNUI7QUFDQSxZQUFJSyxVQUFVWCxvQkFBZCxFQUFvQztBQUNsQyxlQUFLQyxpQkFBTCxDQUF1QixJQUF2QjtBQUNELFNBRkQsTUFFTyxJQUFJLENBQUNELG9CQUFMLEVBQTJCO0FBQ2hDeEIsa0JBQVFDLElBQVIsQ0FBYSx3Q0FBYjtBQUNEO0FBQ0Y7QUFDRjs7O3dCQTNHa0I7QUFDakIsYUFBTyxLQUFLbEIsYUFBWjtBQUNEOzs7d0JBRWlCO0FBQ2hCLGFBQU8sS0FBS0csUUFBTCxDQUFja0QsTUFBckI7QUFDRDs7O3dCQUVpQjtBQUNoQixhQUFPLEtBQUtwRCxZQUFaO0FBQ0Q7Ozt3QkFFVztBQUNWLGFBQU8sS0FBS0MsTUFBWjtBQUNEOzs7c0JBK0ZvQm9ELFEsRUFBVTtBQUM3QixXQUFLWixpQkFBTCxHQUF5QlksUUFBekI7QUFDRDs7Ozs7O2tCQW5Ja0IzRCxJIiwiZmlsZSI6IkdhbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZSBmcm9tICcuL0Jhc2UnO1xuaW1wb3J0IEJvYXJkIGZyb20gJy4vQm9hcmQnXG5pbXBvcnQgUGxheWVyIGZyb20gJy4vUGxheWVyJ1xuaW1wb3J0IFBhcmFtZXRlclZhbGlkYXRpb24gZnJvbSAnLi92YWxpZGF0aW9uL1BhcmFtZXRlclZhbGlkYXRpb24uanMnXG5pbXBvcnQgV2lubmVyQ2hlY2tlciBmcm9tICcuL1dpbm5lckNoZWNrZXInXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lIGV4dGVuZHMgQmFzZSB7XG5cbiAgY29uc3RydWN0b3IoYm9hcmRXaWR0aCwgYm9hcmRIZWlndGgsIGZpZWxkc1RvV2luLCBudW1PZlBsYXllcnMpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fbnVtT2ZQbGF5ZXJzID0gbnVtT2ZQbGF5ZXJzIHx8IDJcbiAgICB0aGlzLl9maWVsZHNUb1dpbiA9IGZpZWxkc1RvV2luIHx8IDNcbiAgICB0aGlzLl9ib2FyZCA9IG5ldyBCb2FyZChib2FyZFdpZHRoLCBib2FyZEhlaWd0aClcbiAgICB0aGlzLl9wbGF5ZXJzID0gW11cbiAgICB0aGlzLl93aW5uZXJDaGVja2VycyA9IHt9XG4gICAgdGhpcy5fdmFsaWRhdGVGaWVsZHNUb1dpbihfLm1heChbYm9hcmRXaWR0aCwgYm9hcmRIZWlndGhdKSlcbiAgICB0aGlzLl9uZXh0VHVybiA9ICcnXG4gIH1cblxuICBfdmFsaWRhdGVGaWVsZHNUb1dpbihtYXhEaW1lbnNpb24pIHtcbiAgICBsZXQgd2lubmluZ0lzSW1wb3NzaWJsZSA9IG1heERpbWVuc2lvbiA8IHRoaXMuX2ZpZWxkc1RvV2luXG4gICAgaWYgKHdpbm5pbmdJc0ltcG9zc2libGUpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBGaWVsZHMgdG8gd2luIHNob3VsZCBub3QgYmUgYmlnZ2VyIHRoYW4gQm9hcmQncyBtYXggZGltZW5zaW9uYClcbiAgICB9XG4gIH1cblxuICBnZXQgbnVtT2ZQbGF5ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9udW1PZlBsYXllcnM7XG4gIH1cblxuICBnZXQgcGxheWVyQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BsYXllcnMubGVuZ3RoXG4gIH1cblxuICBnZXQgZmllbGRzVG9XaW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkc1RvV2luO1xuICB9XG5cbiAgZ2V0IGJvYXJkKCkge1xuICAgIHJldHVybiB0aGlzLl9ib2FyZFxuICB9XG5cbiAgYWRkUGxheWVyKHBsYXllcikge1xuICAgIFBhcmFtZXRlclZhbGlkYXRpb24udmFsaWRhdGVUeXBlKHBsYXllciwgUGxheWVyLCAncGxheWVyJylcbiAgICBsZXQgcGxheWVyRXhpc3RzID0gIV8uaXNVbmRlZmluZWQodGhpcy5nZXRQbGF5ZXIocGxheWVyLmlkKSlcbiAgICBpZiAocGxheWVyRXhpc3RzKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFBsYXllciAke3BsYXllci5uYW1lfSBpcyBhbHJlYWR5IGluIHRoZSBnYW1lLmApXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5fdmFsaWRhdGVQbGF5ZXJDb3VudCgpXG4gICAgcGxheWVyLmdhbWUgPSB0aGlzXG4gICAgdGhpcy5fcGxheWVycy5wdXNoKHBsYXllcilcbiAgICB0aGlzLl93aW5uZXJDaGVja2Vyc1twbGF5ZXIuaWRdID0gbmV3IFdpbm5lckNoZWNrZXIodGhpcy5fYm9hcmQsIHBsYXllci5pZCwgdGhpcy5maWVsZHNUb1dpbilcbiAgfVxuXG4gIGdldFBsYXllcihwbGF5ZXJJZCkge1xuICAgIHJldHVybiBfLmZpbmRXaGVyZSh0aGlzLl9wbGF5ZXJzLCB7aWQ6IHBsYXllcklkfSk7XG4gIH1cblxuICBfdmFsaWRhdGVQbGF5ZXJDb3VudCgpIHtcbiAgICBsZXQgcGxheWVyc0NhcHBlZCA9IHRoaXMucGxheWVyQ291bnQgPj0gdGhpcy5udW1PZlBsYXllcnNcbiAgICBpZiAocGxheWVyc0NhcHBlZCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0dhbWUgaXMgZnVsbC4nKVxuICAgIH1cbiAgfVxuXG4gIHBsYXkocGxheWVySWQsIHgsIHkpIHtcbiAgICB0aGlzLl92YWxpZGF0ZUhhc0FsbFBsYXllcnMoKVxuICAgIHRoaXMuX3ZhbGlkYXRlVHVybihwbGF5ZXJJZClcbiAgICB0cnkge1xuICAgICAgdGhpcy5fYm9hcmQucGxheShwbGF5ZXJJZCwgeCwgeSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLl91bmRvVHVybigpXG4gICAgICB0aHJvdyBlXG4gICAgfVxuICAgIHRoaXMuX2NoZWNrV2lubmVycyhwbGF5ZXJJZCwgeCwgeSlcbiAgICB0aGlzLl9jaGVja0RyYXcoKVxuICB9XG5cbiAgX3ZhbGlkYXRlSGFzQWxsUGxheWVycygpIHtcbiAgICBsZXQgcGxheWVyc0NhcHBlZCA9IHRoaXMucGxheWVyQ291bnQgPj0gdGhpcy5udW1PZlBsYXllcnNcbiAgICBpZiAoIXBsYXllcnNDYXBwZWQpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdHYW1lIGNhbm5vdCBzdGFydCB3aXRob3V0IGFsbCBwbGF5ZXJzLicpXG4gICAgfVxuICB9XG5cbiAgX3ZhbGlkYXRlVHVybihpZCkge1xuICAgIGlmICh0aGlzLmZpcnN0VHVybigpIHx8IHRoaXMuX25leHRUdXJuID09PSBpZCkge1xuICAgICAgbGV0IHBsYXllclBvc2l0aW9uID0gXy5maW5kSW5kZXgodGhpcy5fcGxheWVycywge2lkOiBpZH0pXG4gICAgICBsZXQgbmV4dFBsYXllclBvc2l0aW9uID0gKHBsYXllclBvc2l0aW9uICsgMSkgJSB0aGlzLl9udW1PZlBsYXllcnNcbiAgICAgIHRoaXMuX25leHRUdXJuID0gdGhpcy5fcGxheWVyc1tuZXh0UGxheWVyUG9zaXRpb25dLmlkXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhpcyBpcyB0dXJuIG9mICR7dGhpcy5fbmV4dFR1cm59YClcbiAgICB9XG4gIH1cblxuICBfdW5kb1R1cm4oKSB7XG4gICAgbGV0IHBsYXllclBvc2l0aW9uID0gXy5maW5kSW5kZXgodGhpcy5fcGxheWVycywge2lkOiB0aGlzLl9uZXh0VHVybn0pXG4gICAgbGV0IG5leHRQbGF5ZXJQb3NpdGlvbiA9IChwbGF5ZXJQb3NpdGlvbiAtIDEpICUgdGhpcy5fbnVtT2ZQbGF5ZXJzXG4gICAgaWYgKG5leHRQbGF5ZXJQb3NpdGlvbiA8IDApIHtcbiAgICAgIG5leHRQbGF5ZXJQb3NpdGlvbiArPSB0aGlzLl9udW1PZlBsYXllcnNcbiAgICB9XG4gICAgdGhpcy5fbmV4dFR1cm4gPSB0aGlzLl9wbGF5ZXJzW25leHRQbGF5ZXJQb3NpdGlvbl0uaWRcbiAgfVxuXG4gIGZpcnN0VHVybigpIHtcbiAgICByZXR1cm4gdGhpcy5fbmV4dFR1cm4gPT09ICcnXG4gIH1cblxuICBfY2hlY2tXaW5uZXJzKHBsYXllcklkLCB4LCB5KSB7XG4gICAgbGV0IHdpbm5lckxpc3RlbmVyRXhpc3RzID0gIV8uaXNVbmRlZmluZWQodGhpcy5fb25XaW5uZXJMaXN0ZW5lcilcbiAgICBpZiAodGhpcy5fd2lubmVyQ2hlY2tlcnNbcGxheWVySWRdLmNoZWNrV2lubmVyKHgsIHkpICYmIHdpbm5lckxpc3RlbmVyRXhpc3RzKSB7XG4gICAgICB0aGlzLl9vbldpbm5lckxpc3RlbmVyKHRoaXMuZ2V0UGxheWVyKHBsYXllcklkKSlcbiAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoIXdpbm5lckxpc3RlbmVyRXhpc3RzKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1RoZXJlIGlzIG5vIG9uV2lubmVyTGlzdGVuZXIgYXR0YWNoZWQuJylcbiAgICB9XG4gIH1cblxuICBfY2hlY2tEcmF3KCkge1xuICAgIGxldCBub1dpbm5lcnMgPSAhKHRoaXMuX2ZpbmlzaGVkID09PSB0cnVlKVxuICAgIGxldCB3aW5uZXJMaXN0ZW5lckV4aXN0cyA9ICFfLmlzVW5kZWZpbmVkKHRoaXMuX29uV2lubmVyTGlzdGVuZXIpXG4gICAgaWYgKG5vV2lubmVycykge1xuICAgICAgbGV0IGJvYXJkID0gdGhpcy5fYm9hcmRcbiAgICAgIGxldCBtYXhQbGF5cyA9IGJvYXJkLmhlaWdodCAqIGJvYXJkLndpZHRoXG4gICAgICBsZXQgcGxheXNDb3VudCA9IGJvYXJkLmNvdW50XG4gICAgICBsZXQgaXNEcmF3ID0gcGxheXNDb3VudCA9PT0gbWF4UGxheXNcbiAgICAgIGlmIChpc0RyYXcgJiYgd2lubmVyTGlzdGVuZXJFeGlzdHMpIHtcbiAgICAgICAgdGhpcy5fb25XaW5uZXJMaXN0ZW5lcihudWxsKVxuICAgICAgfSBlbHNlIGlmICghd2lubmVyTGlzdGVuZXJFeGlzdHMpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGVyZSBpcyBubyBvbldpbm5lckxpc3RlbmVyIGF0dGFjaGVkLicpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0IG9uV2lubmVyTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICB0aGlzLl9vbldpbm5lckxpc3RlbmVyID0gbGlzdGVuZXJcbiAgfVxuXG59XG4iXX0=
//# sourceMappingURL=Game.js.map