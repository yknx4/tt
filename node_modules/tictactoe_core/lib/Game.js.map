{"version":3,"sources":["../src/Game.js"],"names":["Game","boardWidth","boardHeigth","fieldsToWin","numOfPlayers","_numOfPlayers","_fieldsToWin","_board","_players","_winnerCheckers","_validateFieldsToWin","max","_nextTurn","maxDimension","winningIsImpossible","RangeError","player","validateType","playerExists","isUndefined","getPlayer","id","console","warn","name","_validatePlayerCount","game","push","playerId","findWhere","playersCapped","playerCount","x","y","_validateHasAllPlayers","_validateTurn","play","e","_undoTurn","_checkWinners","_checkDraw","firstTurn","playerPosition","findIndex","nextPlayerPosition","Error","winnerListenerExists","_onWinnerListener","checkWinner","_finished","noWinners","board","maxPlays","height","width","playsCount","count","isDraw","length","listener"],"mappings":"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","file":"Game.js","sourcesContent":["import Base from './Base';\nimport Board from './Board'\nimport Player from './Player'\nimport ParameterValidation from './validation/ParameterValidation.js'\nimport WinnerChecker from './WinnerChecker'\nimport _ from 'underscore'\n\nexport default class Game extends Base {\n\n  constructor(boardWidth, boardHeigth, fieldsToWin, numOfPlayers) {\n    super()\n    this._numOfPlayers = numOfPlayers || 2\n    this._fieldsToWin = fieldsToWin || 3\n    this._board = new Board(boardWidth, boardHeigth)\n    this._players = []\n    this._winnerCheckers = {}\n    this._validateFieldsToWin(_.max([boardWidth, boardHeigth]))\n    this._nextTurn = ''\n  }\n\n  _validateFieldsToWin(maxDimension) {\n    let winningIsImpossible = maxDimension < this._fieldsToWin\n    if (winningIsImpossible) {\n      throw new RangeError(`Fields to win should not be bigger than Board's max dimension`)\n    }\n  }\n\n  get numOfPlayers() {\n    return this._numOfPlayers;\n  }\n\n  get playerCount() {\n    return this._players.length\n  }\n\n  get fieldsToWin() {\n    return this._fieldsToWin;\n  }\n\n  get board() {\n    return this._board\n  }\n\n  addPlayer(player) {\n    ParameterValidation.validateType(player, Player, 'player')\n    let playerExists = !_.isUndefined(this.getPlayer(player.id))\n    if (playerExists) {\n      console.warn(`Player ${player.name} is already in the game.`)\n      return\n    }\n    this._validatePlayerCount()\n    player.game = this\n    this._players.push(player)\n    this._winnerCheckers[player.id] = new WinnerChecker(this._board, player.id, this.fieldsToWin)\n  }\n\n  getPlayer(playerId) {\n    return _.findWhere(this._players, {id: playerId});\n  }\n\n  _validatePlayerCount() {\n    let playersCapped = this.playerCount >= this.numOfPlayers\n    if (playersCapped) {\n      throw new RangeError('Game is full.')\n    }\n  }\n\n  play(playerId, x, y) {\n    this._validateHasAllPlayers()\n    this._validateTurn(playerId)\n    try {\n      this._board.play(playerId, x, y)\n    } catch (e) {\n      this._undoTurn()\n      throw e\n    }\n    this._checkWinners(playerId, x, y)\n    this._checkDraw()\n  }\n\n  _validateHasAllPlayers() {\n    let playersCapped = this.playerCount >= this.numOfPlayers\n    if (!playersCapped) {\n      throw new RangeError('Game cannot start without all players.')\n    }\n  }\n\n  _validateTurn(id) {\n    if (this.firstTurn() || this._nextTurn === id) {\n      let playerPosition = _.findIndex(this._players, {id: id})\n      let nextPlayerPosition = (playerPosition + 1) % this._numOfPlayers\n      this._nextTurn = this._players[nextPlayerPosition].id\n    } else {\n      throw new Error(`This is turn of ${this._nextTurn}`)\n    }\n  }\n\n  _undoTurn() {\n    let playerPosition = _.findIndex(this._players, {id: this._nextTurn})\n    let nextPlayerPosition = (playerPosition - 1) % this._numOfPlayers\n    if (nextPlayerPosition < 0) {\n      nextPlayerPosition += this._numOfPlayers\n    }\n    this._nextTurn = this._players[nextPlayerPosition].id\n  }\n\n  firstTurn() {\n    return this._nextTurn === ''\n  }\n\n  _checkWinners(playerId, x, y) {\n    let winnerListenerExists = !_.isUndefined(this._onWinnerListener)\n    if (this._winnerCheckers[playerId].checkWinner(x, y) && winnerListenerExists) {\n      this._onWinnerListener(this.getPlayer(playerId))\n      this._finished = true\n    } else if (!winnerListenerExists) {\n      console.warn('There is no onWinnerListener attached.')\n    }\n  }\n\n  _checkDraw() {\n    let noWinners = !(this._finished === true)\n    let winnerListenerExists = !_.isUndefined(this._onWinnerListener)\n    if (noWinners) {\n      let board = this._board\n      let maxPlays = board.height * board.width\n      let playsCount = board.count\n      let isDraw = playsCount === maxPlays\n      if (isDraw && winnerListenerExists) {\n        this._onWinnerListener(null)\n      } else if (!winnerListenerExists) {\n        console.warn('There is no onWinnerListener attached.')\n      }\n    }\n  }\n\n  set onWinnerListener(listener) {\n    this._onWinnerListener = listener\n  }\n\n}\n"]}